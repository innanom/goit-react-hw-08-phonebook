{"version":3,"file":"static/js/648.a430a840.chunk.js","mappings":"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","sources":["components/Filter/Filter.styled.js","redux/Contacts/selectors.js","components/Filter/Filter.jsx","components/ContactsList/ContactsList.styled.js","components/ContactItem/ContactItem.styled.js","components/ContactItem/ContactItem.jsx","components/ContactsList/ContactsList.jsx","../node_modules/nanoid/index.browser.js","components/ContactsForm/ContactsForm.styled.js","components/ContactsForm/ContactsForm.jsx","pages/Contacts.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const FilterLabel = styled.label`\n    margin-top: 20px;\n    display: flex;\n    gap: 10px;\n    align-items: center;\n\n    font-size: 18px;\n    font-weight: 500;\n    font-style: oblique;\n\n\n`;\n\nexport const FilterInput = styled.input`\n    width: 200px;\n    height: 20px;\n    border-color: rgba(164, 91, 233, 0.404);\n    box-shadow: 0 0 0 rgba(30, 9, 33, 0.473),\n        \n`;","export const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilter = state => state.filter.value;","import React from \"react\";\nimport { FilterLabel, FilterInput } from './Filter.styled';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectFilter } from \"../../redux/Contacts/selectors\";\nimport {changeFilter} from '../../redux/Contacts/FilterSlice'\n\nexport const Filter = () => {\n    const filter = useSelector(selectFilter);\n    const dispatch = useDispatch();\n    const handleChangeFilter = (event) => {\n        dispatch(changeFilter(event.currentTarget.value.toLowerCase()));\n  };\n    return (\n        <FilterLabel>\n            Find contacts by name\n            <FilterInput\n                type=\"text\"\n                name=\"filter\"\n                placeholder=\"Enter name\"\n                value={filter}\n                onChange={handleChangeFilter}\n            />\n        </FilterLabel>\n    )\n}\n","import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n    list-style: none;\n    padding: 20px;\n    margin: 0;\n     \n`;\nexport const Text = styled.p`\n    font-size: 16px;\n    font-weight: 400;\n    font-style: oblique;\n`;","import styled from '@emotion/styled';\n\nexport const ListItem = styled.li`\n    position: relative;\n    display: flex;\n    \n    align-items:baseline;\n    justify-content:space-between;\n\n        &::before { \n            content: '';\n            position: absolute;\n            top: 45%;\n            left: -20px;\n            width: 8px;\n            height: 8px;\n            background-color:  rgba(104, 48, 109, 0.500);\n            border-radius: 50%;\n        }\n\n`;\n\nexport const TextItem = styled.p`\n    font-size: 18px;\n    font-weight: 500;\n    color: rgb(68, 38, 97);\n`;\n\nexport const BtnDelete = styled.button`\n    font-size: 14px;\n    font-weight: 500;\n    background-color: rgba(104, 48, 109, 0.200);\n    border: 0;\n    border-radius: 3px;\n    padding: 5px 15px;\n\n        &:hover {\n            background-color:rgba(68, 38, 97, 0.655);\n            }\n`;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { ListItem, TextItem, BtnDelete } from './ContactItem.styled';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from '../../redux/Contacts/operations';\n \nexport const ContactItem = ({ id, name, number }) => {\n    const dispatch = useDispatch();\n    const onDeleteContact = () => {\n        dispatch(deleteContact(id));\n    };\n\n    return (\n        <ListItem key={id}>\n            <TextItem>{name}: {number}</TextItem>\n            <BtnDelete type='button' onClick={(onDeleteContact)}>Delete</BtnDelete>\n        </ListItem>\n    );\n};\n\nContactItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n};","\nimport React from 'react';\nimport { List, Text } from './ContactsList.styled';\nimport { ContactItem } from '../ContactItem/ContactItem';\nimport { useSelector } from 'react-redux';\nimport { selectContacts, selectFilter } from '../../redux/Contacts/selectors';\n\nexport const ContactsList = () => {\n    const contacts = useSelector(selectContacts);\n    const filter = useSelector(selectFilter);\n   \n    const getVisibleContacts = () => {\n        const normalizedFilter = filter.toLowerCase().trim();\n        return contacts.filter(({ name }) => name.toLowerCase().includes(normalizedFilter),);\n    }\n    const filteredContacts = getVisibleContacts();\n    \n    return (\n        <List>\n            {contacts.length === 0 && <Text>The contact list is empty</Text>}\n            {contacts.length !== 0 &&\n                filteredContacts.map(({ name, number, id }) => (\n                <ContactItem\n                    key={id}\n                    id={id}\n                    name={name}\n                    number={number}/>\n            ))\n            }\n        </List>\n    );\n}\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import styled from '@emotion/styled';\n\nexport const FormContacts = styled.form`\n    display: flex;\n    flex-direction: column;\n    gap: 15px;\n\n`;\n\nexport const LabelForm = styled.label`\n    display: flex;\n    flex-direction: column;\n    gap: 5px;\n\n    font-size: 18px;\n    font-weight: 500;\n    color: rgb(68, 38, 97);\n`;\n\nexport const InputForm = styled.input`\n    width: 300px;\n    height: 30px;\n    border-color: rgba(164, 91, 233, 0.404);\n    box-shadow: 0 0 0 rgba(30, 9, 33, 0.473),\n        0 2px 8px rgba(104, 48, 109, 0.274);\n`;\n\nexport const BtnForm = styled.button`\n    width: 150px;\n    font-size: 14px;\n    padding: 10px 15px;\n    background-color: rgba(104, 48, 109, 0.274);\n    border-radius: 3px;\n    border-color: rgba(164, 91, 233, 0.404);\n    box-shadow: 0 0 0 rgba(30, 9, 33, 0.473),\n        0 2px 8px rgba(104, 48, 109, 0.274);\n\n        &:hover {\n            background-color: rgba(68, 38, 97, 0.855);\n        }\n`;","import React, { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport { FormContacts, LabelForm, InputForm, BtnForm } from './ContactsForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from '../../redux/Contacts/selectors';\nimport { addContact } from '../../redux/Contacts/operations';\n\nexport const ContactsForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleChangeName = event => {\n      setName(event.currentTarget.value);\n  };\n  \n  const handleChangeNumber = event => {\n      setNumber(event.currentTarget.value);\n  }\n  \n  const handleAddContact = (name, number) => {\n    const contact = {\n      id: nanoid(),\n      name,\n      number,\n    };\n      dispatch(addContact(contact));\n  };\n   \n  const handleSubmit = event => {\n    event.preventDefault();\n\n    if (contacts.some(contact => contact.name.toLowerCase() === name.toLowerCase())) {\n      alert(`${name} is already in contacts`);\n      return;\n    }\n\n    handleAddContact(name, number);\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n          <FormContacts onSubmit={handleSubmit}>\n            <LabelForm>Name\n            <InputForm\n              type=\"text\"\n              name=\"name\"\n              placeholder='Enter your name'\n              value={name}\n              onChange={handleChangeName}\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              required\n            />\n           </LabelForm>\n           <LabelForm>Number\n              <InputForm\n                type=\"tel\"\n                name=\"number\"\n                placeholder='Enter your telephone number'\n                value={number}\n                onChange={handleChangeNumber}\n                pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                required\n              />\n           </LabelForm>\n          <BtnForm type='submit'>Add contact</BtnForm>\n         </FormContacts>\n        );\n}","\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n// import { Helmet } from 'react-helmet';\nimport {Filter} from '../components/Filter/Filter'\nimport { ContactsList } from '../components/ContactsList/ContactsList';\nimport { ContactsForm } from '../components/ContactsForm/ContactsForm';\nimport { fetchContacts } from '../redux/Contacts/operations';\nimport { selectIsLoading } from '../redux/Contacts/selectors';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n   return (\n    <div>\n      {/* <Helmet> */}\n        <title>Your contacts</title>\n      {/* </Helmet> */}\n       <ContactsForm />\n       <Filter/>\n      <div>{isLoading && 'Request in progress...'}</div>\n       <ContactsList />\n       \n    </div>\n  );\n}"],"names":["FilterLabel","styled","FilterInput","selectContacts","state","contacts","items","selectIsLoading","isLoading","selectFilter","filter","value","Filter","useSelector","dispatch","useDispatch","type","name","placeholder","onChange","event","changeFilter","currentTarget","toLowerCase","List","Text","ListItem","TextItem","BtnDelete","ContactItem","id","number","onClick","deleteContact","ContactsList","filteredContacts","normalizedFilter","trim","includes","getVisibleContacts","length","map","nanoid","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","FormContacts","LabelForm","InputForm","BtnForm","ContactsForm","useState","setName","setNumber","reset","onSubmit","preventDefault","some","contact","alert","addContact","handleAddContact","pattern","title","required","Contacts","useEffect","fetchContacts"],"sourceRoot":""}